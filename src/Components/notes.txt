import React, { useState, useEffect } from 'react';
import axios from 'axios';
import Navbar from './Navbar';
import { FaFolder, FaThumbsUp } from 'react-icons/fa';

const User = ({ projectId }) => {
  const [selectedDomain, setSelectedDomain] = useState('');
  const [domains, setDomains] = useState([]);
  const [projects, setProjects] = useState([]);
  const [loading, setLoading] = useState(false);
  const [selectedProject, setSelectedProject] = useState(null);
  const [isLiked, setIsLiked] = useState(false);
  const [likesCount, setLikesCount] = useState(0);
  const [likes, setLikes] = useState({});
  const [id,setId]=useState(null);
  const [cmnts,setCmnts]=useState([]);
  const [cmntcount, setCmntcount]=useState(0);
  const [usercmnt,setUsercmnt]=useState("");
  useEffect(() => {
    const fetchDomains = async () => {
      try {
        setLoading(true);
        const response = await fetch('http://localhost:5000/api/domains', {
  credentials: 'include'
});
const data = await response.json();
        setDomains(data.domains);
        setId(data.id);
        setLoading(false);
      } catch (error) {
        console.error('Error fetching domains:', error);
        setLoading(false);
      }
    };
  
    fetchDomains();
    
    
    setIsLiked(getIsLiked(projectId)); 
    // Pass projectId to fetchLikesCount
    if (projectId) {
      fetchLikesCount(projectId);
      
    }
  
  }, [projectId]); // Add projectId to the dependency array of useEffect

  const handleDomainChange = (e) => {
    setSelectedDomain(e.target.value);
  };

  const handleViewProjects = async () => {
    if (selectedDomain === '') {
      alert('Please select a domain.');
      return;
    }
    try {
      setLoading(true);
      const response = await fetch(`http://localhost:5000/api/project?domain=${selectedDomain}`);
      const data = await response.json();
      if (data.project.length === 0) {
        alert("No projects are present as of now.");
      }
      setProjects(data.project);
      setLoading(false);
    } catch (error) {
      console.error('Error fetching projects:', error);
      setLoading(false);
    }
  };

  const handleProjectClick = (project) => {
    setSelectedProject(project);
    setLikes(prevLikes => ({
      ...prevLikes,
      [project.projectName]: project.likes ? project.likes.length : 0
    }));
    setIsLiked(project.likes.some(like => like === id));
  
    setLikesCount(project.likes.length);
    setCmntcount(project.comments.length);
    setCmnts(project.comments);
  
    // Check if the user has a comment in the project's comments
    const userHasComment = project.comments.some(comment => comment.postedBy === id);
    if (userHasComment) {
      // Find the user's comment
      const userComment = project.comments.find(comment => comment.postedBy === id);
      setUsercmnt(userComment.text);
    } else {
      // Clear user's comment if not found
      setUsercmnt("");
    }
  };
  

  const fetchLikesCount = async (projectId) => {
    try {
      const response = await axios.get(`http://localhost:5000/api/project/likes/${selectedProject._id}`);
      setLikesCount(response.data.likesCount);
    } catch (error) {
      console.error('Error fetching likes count:', error);
    }
  };

  const handleLike = async () => {
  try {
    const response = await axios.put(
      'http://localhost:5000/api/project/like',
      { projectId: selectedProject._id },
      { withCredentials: true }
    );
    if (response.status === 200) {
      const newIsLiked = !isLiked;
      setIsLiked(newIsLiked);
      // Toggle like status
      localStorage.setItem(projectId, newIsLiked ? 'liked' : 'not-liked');
      console.log("is liked ",newIsLiked);
      // Update likes count immediately
      setLikesCount( newIsLiked ? likesCount + 1 : likesCount - 1);
    }
  } catch (error) {
    console.error('Error liking project:', error);
  }
};

  const getIsLiked = (projectId) => {
    return localStorage.getItem(projectId) === 'liked';
  };
  const handleCommentChange = (e) => {
    setUsercmnt(e.target.value);
  };
  const handleSubmitComment= async () => {
    const res=await axios.put(
      'http://localhost:5000/api/project/Coment',
      { projectId: selectedProject._id ,text:usercmnt},
      { withCredentials: true }
    );
    if(res.status==200){
    alert("Comment added successfully ");
    setCmntcount(cmntcount+1);  
  }
   else
   alert("Something went wrong");

  }

  return (
    <div>
      <Navbar />
      <div className="container mt-4">
        <div className="row">
          <div className="col-md-6 d-flex justify-content-end align-items-center">
            <select className="form-select me-2 mb-3" value={selectedDomain} onChange={handleDomainChange}>
              <option value="">Select Domain</option>
              {domains.map((domain) => (
                <option key={domain._id} value={domain.domainName}>{domain.domainName}</option>
              ))}
            </select>
            <button className="btn btn-primary" onClick={handleViewProjects} style={{ backgroundColor: '#4caf50', border: 'none' }}>
              {loading ? 'Loading...' : 'View Projects'}
            </button>
          </div>
        </div>
        {projects.length > 0 && (
          <div className="row mt-4">
            <div className="col-md-12">
              <h3>Projects under {selectedDomain}</h3>
              <ul className="list-group">
                {projects.map((project) => (
                  <li key={project._id} className="list-group-item">
                    <FaFolder style={{ marginRight: '0.5rem', cursor: 'pointer' }} onClick={() => handleProjectClick(project)} />
                    {project.projectName}
                  </li>
                ))}
              </ul>
            </div>
          </div>
        )}
      </div>
      {selectedProject && (
        <div className="modal" tabIndex="-1" style={{ display: 'block', backgroundColor: 'rgba(0, 0, 0, 0.5)', position: 'fixed', top: 0, bottom: 0, left: 0, right: 0 }}>
          <div className="modal-dialog modal-dialog-centered">
            <div className="modal-content">
              <div className="modal-header">
                <h5 className="modal-title">{selectedProject.projectName}</h5>
                <button type="button" className="btn-close" aria-label="Close" onClick={() => setSelectedProject(null)}></button>
              </div>
              <div className="modal-body">
                <p><strong>Domain:</strong> {selectedProject.domain}</p>
                <p><strong>Description:</strong> {selectedProject.description}</p>
                <div className="mb-3">
                  <button type="button" className="btn btn-outline-primary me-2" onClick={handleLike}>
                    <FaThumbsUp /> {isLiked ? 'Unlike' : 'Like'}
                  </button>
                  <span>Likes: {likesCount}</span>
                </div>
                <div>
                  <span>Comments : {cmntcount}</span>
                     <div>
                        <textarea
                          value={usercmnt}
                          onChange={handleCommentChange}
                          placeholder="Write your comment..."
                          rows={4}
                          cols={50}
                        />
                        <button onClick={handleSubmitComment}>Submit</button>

                        {/* Displaying all comments */}
                        <div>
                          {cmntcount !== 0 && cmnts.map((comment, index) => (
                                  comment.postedBy !== id ? (
                                    <div key={index}>
                                      <p>{comment.text}</p>
                                      <p>Posted by: {comment.postedBy}</p>
                                    </div>
                                  ) : (<div></div>)
                                ))}
                        </div>
                      </div>
                </div>
              </div>
            </div>
          </div>
        </div>
      )}
    </div>
  );
}

export default User;

import express from 'express';
import mongoose from 'mongoose';
import bodyParser from 'body-parser';
import cookieParser from 'cookie-parser';
import cors from 'cors'; // Import CORS middleware
import bcrypt from 'bcrypt';


 
import jwt from 'jsonwebtoken'



const app = express();
const PORT = 5000;

// MongoDB connection
const DB_URL = 'mongodb://127.0.0.1:27017/projectsDB';
const JWT_SECRET="your-secret-key";

mongoose.connect(DB_URL)
  .then(() => {
    console.log('Database connected successfully');
  })
  .catch((err) => {
    console.error('Database connection error:', err);
  });



// User schema
const userSchema = new mongoose.Schema({
  username: { type: String, unique: true },
  password: String,
  Role:{type: String ,default:"user"}
});

const User = mongoose.model('User', userSchema);

app.use(bodyParser.json());
// Allow requests from specific origin
const corsOptions = {
  origin: ['http://localhost:3000'],  // Change this to your frontend URL
  credentials: true
};
app.use(cookieParser());

app.use(cors(corsOptions));

// Middleware to verify JWT token
const verifyToken = (req, res, next) => {
  // Extract token from cookies
  const token = req.cookies.token;
  console.log("token please --  - - - -   ", token);
  
  if (!token) {
    return res.status(401).json({ error: "Unauthorized. Please log in." });
  }

  try {
    // Verify token
    const decoded = jwt.verify(token, JWT_SECRET);

    req.userId = decoded.userId; 
    console.log("role ",decoded);// Attach userId to request object
    req.type=decoded.role;
    next();
  } catch (error) {
    console.error('Token verification failed:', error);
    return res.status(403).json({ error: 'Invalid token' });
  }
};

// Register endpoint
app.post('/api/register', async (req, res) => {
  try {
    const { username, password } = req.body;
    console.log(username + " " + password);

    // Check if username already exists
    const existingUser = await User.findOne({ username });
    if (existingUser) {
      return res.status(400).json({ error: 'Username already exists' });
    }

    // Hash the password
    const hashedPassword = await bcrypt.hash(password, 10);

    // Create a new user
    const newUser = new User({ username, password: hashedPassword });
    await newUser.save();

    // Generate JWT
    const token = jwt.sign({ userId: newUser._id,role:newUser.Role }, JWT_SECRET, { expiresIn: '1d' }); // Change secret key and expiration as needed
    // localStorage.setItem('token', token);
    
console.log('Generated token in registration:', token);

    // Send JWT as a cookie
    res.cookie('token', token, { httpOnly: true });

    res.status(201).json({ message: 'User registered successfully' });
  } catch (error) {
    console.error('Registration error:', error);
    res.status(500).json({ error: error.message });
  }
});


// Login endpoint
app.post('/api/login', async (req, res) => {
  try {
    const { username, password } = req.body;
    console.log("username ",username,"pasword ",password);

    // Find the user
    const user = await User.findOne({ username });
    if (!user) {
      return res.status(401).json({ error: 'Invalid username or password' });
    }

    // Check if the password is correct
    const isPasswordValid = await bcrypt.compare(password, user.password);
    if (!isPasswordValid) {
      return res.status(401).json({ error: 'Invalid username or password' });
    }
    console.log("in login ",user.Role);
    // Generate JWT
    const token = jwt.sign({ userId: user._id,role:user.Role }, 'your-secret-key', { expiresIn: '1d' }); // Change secret key and expiration as needed
// Log the token to the console
// localStorage.setItem('token', token);
console.log('Generated token in login:', token);
console.log("token = ",token);
    // Send JWT as a cookie
    res.cookie('token', token, { httpOnly: true });
    console.log("token genereated by man ",token);

    res.json({ message: 'Login successful' });
  } catch (error) {
    res.status(500).json({ error: error.message });
  }
});

// Logout endpoint
app.get('/api/logout', (req, res) => {
  res.clearCookie('token'); // Clear JWT cookie
  res.json({ message: 'Logout successful' });
});


const domainSchema = new mongoose.Schema({
  domainName: String,
});
const {ObjectId} = mongoose.Schema.Types
const projSchema = new mongoose.Schema({
  projectName: String,
  domain: String,
  description: String,
  likes: [{ type: ObjectId, ref: "User" }],
  comments: [{
    text: String,
    time: { type: Date, default: Date.now }, // Add the time field
    postedBy: { type: ObjectId, ref: "User" }
  }],
});

// Middleware to sort comments array in decreasing order based on time before saving
projSchema.pre('save', function(next) {
  this.comments.sort((a, b) => b.time - a.time);
  next();
});

const Domain = mongoose.model('Domain', domainSchema);
const Proj = mongoose.model('Proj', projSchema);
app.use(bodyParser.json());

app.get('/api/isauth',verifyToken,async(req,res)=>{
  console.log("is adming ",req.type);
  if(req.type=='Admins')
  res.status(200).json({});
  res.status(400).json({error:"Unauthorized user for this route"});
})
// Endpoint for submitting domain name
app.post('/api/domains',verifyToken, async (req, res) => {
  console.log("in post requests iam sorry");
  if(req.type!='Admins'){
    res.status(300).json({error:" U are not allowed to enter "});
  }
  try {
    
    const { domainName } = req.body;
    // Check if domain already exists
    const existingDomain = await Domain.findOne({ domainName });
    if (existingDomain) {
      return res.status(400).json({ error: 'Domain already exists' });
    }
    // Save domain
    const domain = new Domain({ domainName });
    await domain.save();
    res.json({ message: 'Domain submitted successfully', domain });
  } catch (error) {
    res.status(500).json({ error: error.message });
  }
});

// Endpoint for fetching all domain names
app.get('/api/domains',verifyToken, async (req, res) => {
    try {
      console.log("in get request ");
      // Fetch all domains from the database
      const domains = await Domain.find({});
      console.log(domains+" domains list"); // Only retrieve domainName field
      res.json({ id:req.userId,domains });
    } catch (error) {
      console.log("error "+error);
      res.status(500).json({ error: error.message });
    }
  });
  

// Endpoint for adding a project
app.post('/api/project', verifyToken,async (req, res) => {
  if(req.type!="Admins"){
    res.status(300).json({error:"Unauthorized"});
  }
  try {
    const { domain, projectName, description } = req.body;
    
    // Check if project already exists for this domain
    const existingProject = await Proj.findOne({ domain, projectName });
    if (existingProject) {
      console.log('Proj already exists for this domain:', domain, projectName);
      return res.status(400).json({ error: 'Proj already exists for this domain' });
    }
    
    // Save project
    const project = new Proj({ domain, projectName, description });
    await project.save();
    
    console.log('Proj added successfully:', project);
    res.json({ message: 'Proj added successfully', project });
  } catch (error) {
    console.error('Error adding project:', error);
    res.status(500).json({ error: error.message });
  }
});

// Endpoint for fetching projects based on domain
app.get('/api/project', async (req, res) => {
    try {
      const { domain } = req.query;
      if (!domain) {
        return res.status(400).json({ error: 'Domain is required' });
      }
      const project = await Proj.find({ domain });
      res.json({ project });
    } catch (error) {
      res.status(500).json({ error: error.message });
    }
  });

  //project like

  app.put('/api/project/like', verifyToken, async (req, res) => {
    const { projectId } = req.body;
    const userId = req.userId; // Assuming user ID is stored in req.user.id after verification
  
    try {
      const project = await Proj.findById(projectId);
      if (!project) {
        return res.status(404).json({ error: 'Proj not found' });
      }
  
      const likedIndex = project.likes.indexOf(userId);
      if (likedIndex === -1) {
        // User has not liked the project, add user ID to likes array
        project.likes.push(userId);
      } else {
        // User has already liked the project, remove user ID from likes array
        project.likes.splice(likedIndex, 1);
      }
  
      await project.save();
      res.sendStatus(200);
    } catch (error) {
      
      console.error('Error liking project:', error);
      res.status(500).json({ error: 'Internal server error' });
    }
  });
  app.put('/api/project/Coment',verifyToken,async(req,res)=>{
    const { text, projectId } = req.body;
    const userId = req.userId;
    
    try {
      const project = await Proj.findById(projectId);
      if (!project) {
        return res.status(404).json({ error: 'Proj not found' });
      }
      
      // Check if the user already has a comment
      const existingCommentIndex = project.comments.findIndex(comment => comment.postedBy.toString() === userId);
      if (existingCommentIndex !== -1) {
        // If the user already has a comment, update it
        project.comments[existingCommentIndex].text = text;
      } else {
        // If the user doesn't have a comment, add a new one
        project.comments.push({ text, postedBy: userId });
      }
    
      // Save the updated project
      await project.save();
      
      // Return a success response
      return res.status(200).json({ message: 'Comment updated/added successfully' });
    } catch (error) {
      return res.status(500).json({ error: 'Internal server error' });
    }
    
  });
  
  app.get('/api/project/likes/:projectId', async (req, res) => {
    const { projectId } = req.params;
  
    try {
      const project = await Proj.findById(projectId);
      if (!project) {
        return res.status(404).json({ error: 'Proj not found' });
      }
      
      res.json({ likesCount: project.likes.length });
    } catch (error) {
      console.error('Error fetching likes count:', error);
      res.status(500).json({ error: 'Internal server error' });
    }
  });

app.listen(PORT, () => {
  console.log(`Server is running on port ${PORT}`);
});